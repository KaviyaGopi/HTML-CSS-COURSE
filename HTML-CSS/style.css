/* Universal selector */

* {
  /* border-top: 10px solid #1098ad; */
  margin: 0;
  padding: 0;
}

/* PAGE SECTIONS */

body {
  color: #444;
  font-family: sans-serif;

  border-top: 10px solid #1098ad;
  position: relative;
}

.container {
  width: 1200px;
  /* margin-left: auto;
  margin-right: auto; */
  margin: 0 auto;
}

.main-header {
  background-color: #f7f7f7;
  /*padding: 20px;
  padding-left: 40px;
  padding-right: 40px; */
  padding: 20px 40px;
  margin-bottom: 60px;
  /*height: 80px;*/
}

nav {
  font-size: 18px;
  /* test-align:center; */
}

article {
  margin-bottom: 60px;
}

.post-header {
  margin-bottom: 40px;
  /* position:relative; */
}

aside {
  background-color: #f7f7f7;
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;
  /* padding-top: 50px;
  padding-bottom: 50px; */
  /* Padding : 50px 0 (the first value is for top and bottom and the second value is for left and right )  */
  padding: 50px 0;
  width: 500px;
}

/* SMALLER ELEMENTS */
/*List selector */
h1,
h2,
h3 {
  color: #1098ad;
}

h1 {
  font-size: 26px;
  font-style: italic;
  text-transform: uppercase;
}

h2 {
  font-size: 40px;
  margin-bottom: 30px;
}

h3 {
  font-size: 30px;
  margin-bottom: 20px;
  margin-top: 40px;
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
}

p {
  font-size: 22px;
  line-height: 1.5;
  margin-bottom: 15px;
  /* display: inline; */
}

ul,
ol {
  margin-left: 50px;
  margin-bottom: 20px;
}

li {
  font-size: 20px;
  margin-bottom: 10px;
  /* display: inline; */
}

li:last-child {
  margin-bottom: 0;
}

/* descendant selector */
footer p {
  font-size: 16px;
}

header p {
  font-style: italic;
}

article header p {
  font-style: italic;
}

/* Class and ID Selectors */

/* ID Selectors : it can be used only once */
#author {
  font-style: italic;
  font-size: 18px;
}

#copyright {
  font-size: 16px;
}

/* Class Selectors : if we need to use the id names for multiple times , we use class method */
.related-author {
  font-size: 18px;
  font-weight: bold;
}

/* ul {
  list-style: none;
} */

.related {
  list-style: none;
}

/* 
Working with colors 
RGB Model : Every color can be represented by a combination of RED , GREEN and BLUE
Each of the 3 base colors can take a value between 0 and 255 . which leads to 16.8 millon different colors 

Defining colors in CSS
1.RGB/RGBA NOTATION
Regular RGBmodel 
rgb(0,255,255)

RGB with Transparency("alpha")
rgba(0,255,255,0.3)

2.HEXADECIMAL NOTATION
Instead of using a scal from 0 to 255 , we go from 0 to ff (255 in hexadecimal number)
#00ffff
Shorthand , when all colors are identical pairs 
#0ff

In practice , we mostly use hexadecimal colors , and rgba when we need transparency

When colors in all 3 channels are the same , we get a grey color 
there are 256 pure grays to choose from 
rgb(69,69,69) / #444444 / #444
rgb(183,183,183) / #b7b7b7
*/

/* body {
  background-color: bisque;
} */

/* .first-li {
  font-weight: bold;
} */

/* Pseudo Class : in the below code it will select all the li element of that are the first child elements of it's parent element */
li:first-child {
  font-weight: bold;
}

li:last-child {
  font-style: italic;
}

/* li:nth-child(2) {
  color: red;
} */

/* Pseudo classes using descendant selector 
   Misconception: This wont work 
*/
article p:first-child {
  color: red;
}

/* how to style Pseudo class using hyperlinks 
   Styling links 
*/

/* the following four way is alwasy listed in this way "LVHA" (list , visited , hover , active */
a:link {
  color: #1098ad;
  text-decoration: none;
}

a:visited {
  color: #1098ad;
}

a:hover {
  color: orangered;
  font-weight: bold;
  text-decoration: underline orangered;
}

a:active {
  background-color: black;
  font-style: italic;
}

/* CONFLICTING SELECTORS AND DECLARATIONS 

<p id="author-text" class="author">
  posted by laura jones on monday , june 21st 2017
</p>

- There are multiple selectors selecting the same element . Which of them applies ?
- All of them . All rules and properties are applied!
- But there are conflicting font-size declarations! Is it 18px , or 20px , or 22px ?

.author{
  font-style : italic;
  font-size: 18px;
}

#author-text{
  font-size:20px;
}

p,li{
  font-family: sans-serif;
  color: #444444;
  font-size: 22px;
}


RESOLVING CONFLICTING DECLARATION

-lowest Priority to Highest priority 
- The highest priority for now is 

-Declaration marked ! 
- Inline style (style attribute in HTML) is the most highest priority , but we don't use that 
1 - ID (#) selector 
  - if there's any ID selector then that is the rule going to apply  , if there are multiple ID selector then the last selector in code applies 
2 - The next higest priority is 
    Class (.) or pseudo-class (:) selector
3 - Element selector (p,div,li,etc.)
4 - Universal Selector (*)

*/

/* RESOLVING CONFLICTS*/
#copyright {
  color: red;
}

.copyright {
  color: #1098ad;
}

.text {
  color: yellow;
}

footer p {
  color: greenyellow;
}

/* Inheritance and the Universal selector 
HOW INHERITANCE WORKS                                             
                                                                        (This body is the parent element , it applies it's properties to nav , h1 and p in the following example . Not all the 
                                                                         properties get inherited . It's mostly ones related to text : font-family , font-size , font-weight , font-style , color , 
                                                                         line-height , letter-spacing , text-align , text-transform , text-shadow , list-style , etc .

<body>                                                                  body{
                                                                          color:#444444;
<nav>                                                                     font-size:16px;
  This is the navigation                                                  font-family: sans-serif;
</nav>                                                    
                                                                          border-top: 10px solid #1098ad; (the border property does not get inherited 
<h1>My website</h>                                                       }
                              
<p>                                                                     (h1 overriding inherited styles)
                                                                        
  the text is the paragraph is completely irrelevant                    h1{
                                                                         color:#1098ad;
</p>                                                                     font-size: 32px;
                                                                         text-transform: uppercase;
</body>                                                                 }

*/

/* nav a:link,
nav p{
  font-size: 18px;
} 

nav {
  font-size: 18px;
}

*/

/* THE CSS BOX MODEL
       

       ----------------------------------------------------
       -                                                  -
       -                               Margin             -
       -    ________________________________________      -
       -    -                                      -      -
       -    -                   Padding            -      -
       -    -      ___________________________     -      -
       -    -      -       Width             -     -      -
       -    -      -                         -     -      -
       -    -      -                         -     -      -
       -    -      -       CONTENT    Height -     -      -
       -    -      -                         -     -      -
       -    -      -                         -     -      -
       -    -      -__________________________     -      -
       -    -                                      -      -
       -    -                        Border        -      -
       -    ________________________________________      -
       -                                                  -
       -                                                  -
       ----------------------------------------------------



- CONTENT : Text , Images , etc . , 
- BORDER : Aline around the element , still inside of the element
- PADDING : Invisible space around the content , inside of the element
- MARIGN : Space outside of the element , between elements 
- FILL AREA : Area tha gets filled with background color or background image

ELEMENT HEIGHT AND WIDTH CALCULATION 
- FINAL ELEMENT WIDTH = Left border + left paddding + width + right padding + right border
- FINAL ELEMENT HEIGHT = Top border + top padding + height + bottom padding + bottom border 

We can specify all these values using CSS properties 

*/

.post-img {
  width: 800px;
  height: auto;
}

nav a:link {
  /* background-color: orangered;
  margin: 20px;
  padding: 20px;

  display: block; */

  margin-right: 30px;
  margin-top: 10px;
  display: inline-block;

  text-align: center;
}

nav a:link:last-child {
  margin-right: 0;
}

button {
  font-size: 22px;
  padding: 20px;
  cursor: pointer;

  position: absolute;
  /* top: 0;
  left: 0; */
  bottom: 50px;
  right: 50px;
}

/* Pseudo class are written with one ( : ) but Pseudo Element are written with ( :: ) two */

h1::first-letter {
  font-style: normal;
  margin-right: 5px;
}

/* h3 + p::first-line {
  color: red;
} */

h2::after {
  content: "TOP";
  background-color: #ffe70e;
  color: #444;
  font-size: 16px;
  font-weight: bold;
  display: inline-block;
  padding: 5px 10px;
  position: relative;
  top: -15px;
  right: -45rem;
}

/* 
BLOCK-LEVEL ELEMENTS

-Elements are formatted visually as blocks
-Elements occupy 100% of parent element's width, no matter the content 
-Elelments are stacked vertically by default , one after another
-the box-model applies as showed earlier 

Default elements: body , main , header , footer , section , nav , aside , div , h1-h6 , 
p , ul , ol , li , etc . . . 

With CSS : display : block


INLINE ELEMENT
-Occupies only the space necessary for it's content
-Caused no line-break afed only horizontally (left and right)

Default elements : a , img  ,strong , em , button , etc .
with CSS : display : inline

SUMMARY : INLINE , BLter or before the element
-Box model applies in a different way:heights and widths do not apply
-Paddings and margins are appliOCK-LEAVEL AND INLINE-BLOCK BOXES

BLOCK-LEAVEL BOXES
-Element formatted visually as blocks
-100% of parent's width
-Vertically , one after another
-box-model applies as showed

INLINE-BLOCK BOXES
-Looks like inline from the outside, behaves like block-leavel on the inside
-Occupies only content's space
-Causes no line-breaks
-Box-model applies as showed
display :inline-block

INLINE BOXES
-Occupies only content's space
-Causes no line-breaks
-Box model is different : heights and widths do not apply 
-Paddings and margins only horizontal (left and right)
*/

/* NORMAL FLOW Vs. ABSOLUTE POSITIONING 

NORMAL FLOW  
-Default Positioning
-Element is "in flow"
-Elements are simply laid out according to therir order in the HTML code

Default Positioning 
position:relative

ABSOLUTE POSITIONING 
-Element is removed from the normal flow : "out of flow"
-No impact on surrounding element , might overlap them 
-We use top , bottom , left , or right to offset the element from it's relatively positioned container

position : absolute
*/

/* LAYOUT *
-Layout is the way text , Images and other content is placed and arranged on a webpage
-Layout gives the page a visual structure , into which we place our aontent
-Building a layout : Arranging page elements into a visual structure , instead of simply having them placed one after another (normal flow)

1. FLOAT LAYOUTS
The only way of bulding layouts of all sizes, using the float CSS property . still used , but getting outdate fast .

2.FLEXBOX
Modern way of laying out elements in a 1-dimensional row without using floats . perfect for component layouts 

3. CSS GRID
For laying out element in a fully-fledged 2-dimensional grid . Perfect for page layouts andn complex components 
/

/* FLOATS */
.author-img {
  float: left;
  margin-bottom: 20px;
}

.author {
  padding-top: 10px;
  margin-left: 20px;
  float: left;
}

h1 {
  float: left;
}

/* h2 {
  float: left;
} */

nav {
  float: right;
}

.clear {
  clear: both;
}

.clearfix::after {
  clear: both;
  content: "";
  display: block;
}

article {
  /* background-color: green; */
  width: 825px;
  float: left;
}

aside {
  /* background-color: red; */
  width: 300px;
  float: right;
}

footer {
  /* background-color: yellow; */
  clear: both;
}
